# Generated by Django 4.2 on 2024-11-28 16:09

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import src.user.validators
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, unique=True)),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=30, unique=True, validators=[src.user.validators.CustomUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=100, verbose_name='first name')),
                ('middle_name', models.CharField(blank=True, max_length=100, verbose_name='middle Name')),
                ('last_name', models.CharField(blank=True, max_length=100, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, unique=True, verbose_name='email address')),
                ('phone_no', models.CharField(blank=True, max_length=15, verbose_name='phone number')),
                ('photo', models.ImageField(blank=True, default='', null=True, upload_to='', validators=[src.user.validators.validate_image])),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Select this for deactivating accounts.', verbose_name='active')),
                ('is_archived', models.BooleanField(default=False, help_text='Designates whether this user should be treated as deleted. Unselect this instead of deleting users.', verbose_name='archived')),
                ('is_email_verified', models.BooleanField(default=False)),
                ('is_phone_verified', models.BooleanField(default=False)),
                ('auth_provider', models.CharField(blank=True, choices=[('GOOGLE', 'Google'), ('MICROSOFT', 'Microsoft'), ('LINKEDIN', 'Linkedin'), ('APPLE', 'Apple')], default='BY-CREDENTIALS', max_length=30)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='date joined')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'ordering': ['-id'],
            },
        ),
        migrations.CreateModel(
            name='PermissionCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this object should be treated as active. Unselect this instead of deleting instances.', verbose_name='active')),
                ('is_archived', models.BooleanField(default=False, help_text='Designates whether this object should be treated as delected. Unselect this instead of deleting instances.', verbose_name='archived')),
                ('name', models.CharField(max_length=100)),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='codename')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this object should be treated as active. Unselect this instead of deleting instances.', verbose_name='active')),
                ('is_archived', models.BooleanField(default=False, help_text='Designates whether this object should be treated as delected. Unselect this instead of deleting instances.', verbose_name='archived')),
                ('name', models.CharField(max_length=100, verbose_name='name')),
                ('codename', models.CharField(max_length=100, unique=True, verbose_name='codename')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('permission_category', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='permissions', to='user.permissioncategory')),
            ],
            options={
                'verbose_name': 'permission',
                'verbose_name_plural': 'permissions',
                'ordering': ['permission_category', 'id'],
            },
        ),
        migrations.CreateModel(
            name='UserRole',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='created date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='date updated')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this object should be treated as active. Unselect this instead of deleting instances.', verbose_name='active')),
                ('is_archived', models.BooleanField(default=False, help_text='Designates whether this object should be treated as delected. Unselect this instead of deleting instances.', verbose_name='archived')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='name')),
                ('codename', models.CharField(max_length=50, unique=True, verbose_name='codename')),
                ('is_system_managed', models.BooleanField(default=False, verbose_name='System Managed')),
                ('created_by', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL)),
                ('permissions', models.ManyToManyField(blank=True, to='user.userpermission', verbose_name='permissions')),
            ],
            options={
                'verbose_name': 'user role',
                'verbose_name_plural': 'user roles',
            },
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='user.userrole', verbose_name='user groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='user.userpermission', verbose_name='user permissions'),
        ),
    ]
