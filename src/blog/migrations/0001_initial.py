# Generated by Django 4.2 on 2024-05-25 09:50

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import mptt.fields
import src.blog.validators
import uuid


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="BlogMedia",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "file",
                    models.FileField(
                        help_text="Media max size: 2MB",
                        upload_to="blog/blog_media",
                        validators=[src.blog.validators.validate_blog_media],
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Post",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created date",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="date updated"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this object should be treated as active. Unselect this instead of deleting instances.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this object should be treated as delected. Unselect this instead of deleting instances.",
                        verbose_name="archived",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "title",
                    models.CharField(
                        help_text="Title of the post.",
                        max_length=255,
                        verbose_name="Title",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the title. Lowercase with letters, numbers, and hyphens.",
                        max_length=255,
                        unique=True,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("PUBLISHED", "Published"),
                            ("DRAFT", "Draft"),
                            ("SCHEDULED", "Scheduled"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="PUBLISHED",
                        help_text="Publication status of the post.",
                        max_length=20,
                    ),
                ),
                (
                    "format",
                    models.CharField(
                        choices=[
                            ("STANDARD", "Standard"),
                            ("VIDEO", "Video"),
                            ("GALLERY", "Gallery"),
                            ("AUDIO", "Audio"),
                            ("QUOTE", "Quote"),
                            ("LINK", "Link"),
                        ],
                        help_text="Post format which designates how the theme will display the post.",
                        max_length=15,
                    ),
                ),
                (
                    "visibility",
                    models.CharField(
                        choices=[
                            ("PUBLIC", "Public"),
                            ("PRIVATE", "Private"),
                            ("PASSWORD-PROTECTED", "Password Protected"),
                        ],
                        help_text="Determines who can see this post. Public posts are visible to everyone, private posts are only visible to the author, and password-protected posts require a password to access.",
                        max_length=20,
                    ),
                ),
                ("content", models.TextField(help_text="Main content of the post.")),
                (
                    "excerpt",
                    models.CharField(
                        blank=True,
                        help_text="Short description of the post, used in summaries and thumbnails.",
                        max_length=255,
                        verbose_name="Excerpt",
                    ),
                ),
                (
                    "read_time",
                    models.PositiveSmallIntegerField(
                        default=0, help_text="Estimated reading time in minutes."
                    ),
                ),
                (
                    "stick_at_top",
                    models.BooleanField(
                        default=False,
                        help_text="Stick this post to the top of the blog page.",
                        verbose_name="Stick at Top",
                    ),
                ),
                (
                    "published_at",
                    models.DateTimeField(
                        blank=True, help_text="Publication date of the post.", null=True
                    ),
                ),
                (
                    "allow_comments",
                    models.BooleanField(default=True, verbose_name="Allow Comments"),
                ),
                ("views", models.PositiveIntegerField(default=0, verbose_name="views")),
                (
                    "up_votes",
                    models.PositiveIntegerField(default=0, verbose_name="up votes"),
                ),
                (
                    "down_votes",
                    models.PositiveIntegerField(default=0, verbose_name="down votes"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        help_text="Author of the post.",
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="user_posts",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Post Author",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post",
                "verbose_name_plural": "Posts",
                "ordering": ["-published_at"],
            },
        ),
        migrations.CreateModel(
            name="PostTag",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created date",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="date updated"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this object should be treated as active. Unselect this instead of deleting instances.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this object should be treated as delected. Unselect this instead of deleting instances.",
                        verbose_name="archived",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name as it appears on your site.",
                        max_length=50,
                        unique=True,
                        verbose_name="Tag Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the name. Lowercase with letters, numbers, and hyphens.",
                        max_length=55,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description; may be displayed by some themes.",
                    ),
                ),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Tag",
                "verbose_name_plural": "Tags",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="PostComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created date",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="date updated"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this object should be treated as active. Unselect this instead of deleting instances.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this object should be treated as delected. Unselect this instead of deleting instances.",
                        verbose_name="archived",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "full_name",
                    models.CharField(
                        blank=True,
                        help_text="Required if the comment is made by an anonymous user.",
                        max_length=50,
                        verbose_name="Full Name",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        blank=True,
                        help_text="Required if the comment is made by an anonymous user.",
                        max_length=254,
                        verbose_name="Email",
                    ),
                ),
                (
                    "message",
                    models.TextField(
                        help_text="The content of the comment.",
                        max_length=500,
                        verbose_name="Message",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("MODERATION", "Moderation"),
                            ("APPROVED", "Approved"),
                            ("REJECTED", "Rejected"),
                        ],
                        default="APPROVED",
                        help_text="The status of the comment (e.g., approved, moderation).",
                        max_length=30,
                        verbose_name="Status",
                    ),
                ),
                (
                    "is_edited",
                    models.BooleanField(
                        default=False,
                        help_text="Indicates if the comment has been edited.",
                        verbose_name="Is Edited",
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        help_text="Parent comment if this comment is a reply. Totally optional.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="replies",
                        to="blog.postcomment",
                        verbose_name="Parent Comment",
                    ),
                ),
                (
                    "post",
                    models.ForeignKey(
                        help_text="The blog post this comment is related to.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="comments",
                        to="blog.post",
                        verbose_name="Post",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="The user who made the comment. Null if the comment is anonymous.",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="user_comments",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="Author",
                    ),
                ),
            ],
            options={
                "verbose_name": "Post Comment",
                "verbose_name_plural": "Post Comments",
                "ordering": ["-created_at"],
            },
        ),
        migrations.CreateModel(
            name="PostCategory",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        default=django.utils.timezone.now,
                        editable=False,
                        verbose_name="created date",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(auto_now=True, verbose_name="date updated"),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this object should be treated as active. Unselect this instead of deleting instances.",
                        verbose_name="active",
                    ),
                ),
                (
                    "is_archived",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether this object should be treated as delected. Unselect this instead of deleting instances.",
                        verbose_name="archived",
                    ),
                ),
                (
                    "uuid",
                    models.UUIDField(default=uuid.uuid4, editable=False, unique=True),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="The name as it appears on your site.",
                        max_length=50,
                        unique=True,
                        verbose_name="Category Name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly version of the name. Lowercase with letters, numbers, and hyphens.",
                        max_length=55,
                        unique=True,
                    ),
                ),
                (
                    "description",
                    models.TextField(
                        blank=True,
                        help_text="Optional description; may be displayed by some themes.",
                    ),
                ),
                ("lft", models.PositiveIntegerField(editable=False)),
                ("rght", models.PositiveIntegerField(editable=False)),
                ("tree_id", models.PositiveIntegerField(db_index=True, editable=False)),
                ("level", models.PositiveIntegerField(editable=False)),
                (
                    "created_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "parent",
                    mptt.fields.TreeForeignKey(
                        blank=True,
                        help_text="Categories can have a hierarchy. Totally optional.",
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sub_categories",
                        to="blog.postcategory",
                        verbose_name="Parent Category",
                    ),
                ),
            ],
            options={
                "verbose_name": "Category",
                "verbose_name_plural": "Categories",
                "ordering": ["-created_at"],
            },
        ),
        migrations.AddField(
            model_name="post",
            name="categories",
            field=models.ManyToManyField(
                help_text="Categories this post belongs to.",
                related_name="posts",
                to="blog.postcategory",
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="created_by",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="post",
            name="tags",
            field=models.ManyToManyField(
                help_text="Tags associated with this post.",
                related_name="posts",
                to="blog.posttag",
            ),
        ),
        migrations.AddIndex(
            model_name="posttag",
            index=models.Index(fields=["name"], name="blog_postta_name_8af35f_idx"),
        ),
        migrations.AddIndex(
            model_name="posttag",
            index=models.Index(fields=["slug"], name="blog_postta_slug_ff15fa_idx"),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(fields=["user"], name="blog_postco_user_id_52d127_idx"),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(fields=["post"], name="blog_postco_post_id_a9ef54_idx"),
        ),
        migrations.AddIndex(
            model_name="postcomment",
            index=models.Index(fields=["status"], name="blog_postco_status_791745_idx"),
        ),
        migrations.AddIndex(
            model_name="postcategory",
            index=models.Index(fields=["name"], name="blog_postca_name_ac2fe4_idx"),
        ),
        migrations.AddIndex(
            model_name="postcategory",
            index=models.Index(fields=["slug"], name="blog_postca_slug_786ee9_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["title"], name="blog_post_title_e1c6f7_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["slug"], name="blog_post_slug_cdb902_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(fields=["status"], name="blog_post_status_02ce19_idx"),
        ),
        migrations.AddIndex(
            model_name="post",
            index=models.Index(
                fields=["published_at"], name="blog_post_publish_698bc0_idx"
            ),
        ),
    ]
